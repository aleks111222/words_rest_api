import express from 'express';
import { v4 as uuidv4 } from 'uuid';
import Joi from '@hapi/joi';
uuidv4();

const router = express.Router();

let words = [];

/**
 * @swagger
 * components:
 *   schemas:
 *     Word:
 *       type: object
 *       required:
 *         - word
 *       properties:
 *         id:
 *           type: string
 *           description: Unique string id generated by uuidv4.
 *         word:
 *           type: string
 *           description: word from an english dictionary.
 *         occurence:
 *           type: integer
 *           description: Counts number of occurences of the given word in the collection.
 *        
 */

/**
 * @swagger
 * tags:
 *   name: Words
 *   description: Collection managing API
 */

/**
 * @swagger
 * /words:
 *  get:
 *   summary: Gets all UNIQUE word objects from the collection.
 *   tags: [Words]
 *   responses:
 *    '404':
 *      description: Indicates that the database is empty.
 *    '200':
 *      description: Success
 *   
 */
router.get('/', (req, res) => {  
    let result = [];

    if(words.length === 0) {
        res.status(404).send("Database is empty.");
        return;
    }

    words.forEach(item => {
        if(item.occurence === 1) {
            result.push(item);
        }
    });

    res.send(result);
});

/**
 * @swagger
 * /words/{word}:
 *  get:
 *   summary: Gets number of occurences in the collection of the given word.
 *   tags: [Words]
 *   parameters:
 *     - in: path
 *       name: word
 *       schema:
 *         type: string
 *       required: true
 *       description: word
 *   responses:
 *    '400':
 *      description: Indicates that the parameter word is not valid.
 *    '200':
 *      description: Success
 *   
 */
router.get('/:word', (req, res) => {

    let regex = new RegExp("^[a-zA-Z0-9]+$");

    if(!regex.test(req.params["word"])) {
        res.status(400).send("Please enter a valid word consisting of at least one alphanumeric character.");
        return;
    }

    let counter = 0;

    words.forEach(item => {
        if(item.word === req.params["word"]) {
            counter = item.occurence;
        }
    });

    res.send(counter.toString());
});

/**
 * @swagger
 * /words:
 *  post:
 *    summary: Adds an array of words to the database.
 *    tags: [Words]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: array
 *    responses:
 *     '400':
 *       description: Array of words is not appropriate.
 *     '200':
 *       description: Success
 *   
 */
router.post('/', (req, res) => {
    const schema = Joi.array().has(Joi.string().min(1).required()).min(1).required();

    const result = Joi.validate(req.body, schema);

    if(result.error) {
        res.status(400).send("Please enter a non-empty array of appropriate words.");
        return;
    }

    let message = "";

    req.body.forEach(newWord => {
        let regex = new RegExp("^[a-zA-Z0-9]+$");

        if(!regex.test(newWord)) {
            message += `Warning: "${newWord}" could not be added due to its inappropriate form.\n`;
        }
        else {
            message += `Word "${newWord}" was added to the database.\n`;
            
            const newItem = {id: uuidv4(), word: newWord, occurence: 1};

            words.forEach(oldItem => {
                if(oldItem.word === newWord) {
                    newItem.occurence++;
                    oldItem.occurence++;
                }
            });

            words.push(newItem);
        }
    });

    res.send(message);
});

/**
 * @swagger
 * /words/{word}:
 *  delete:
 *   summary: Deletes all occurences of the given word.
 *   tags: [Words]
 *   parameters:
 *     - in: path
 *       name: word
 *       schema:
 *         type: string
 *       required: true
 *       description: word to be deleted
 *   responses:
 *    '400':
 *      description: Entered word is not appropriate.
 *    '200':
 *      description: Success
 *    '404':
 *      description: Could not find given word in the database.
 *   
 */
router.delete('/:word', (req, res) => {

    let regex = new RegExp("^[a-zA-Z0-9]+$");

    if(!regex.test(req.params["word"])) {
        res.status(400).send("Please enter a valid word consisting of at least one alphanumeric character.");
        return;
    }

    let found = false;

    words.forEach(item => {
        if(item.word === req.params["word"]) {
            found = true;
        }
    });

    if(!found) {
        res.status(404).send(`Word: "${req.params["word"]}" does not exist in the database.`);
        return;
    }

    words = words.filter((word) => word.word !== req.params["word"]);
    res.send(`All instances of the word: "${req.params["word"]}" were deleted from the database.`);
})

export default router;